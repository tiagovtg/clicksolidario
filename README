
#Requisitos para rodar a aplicação, se necessario.

#ReCaptcha

    #Adicione a seguinte linha no Gemfile

        gem 'recaptcha', :require => 'recaptcha/rails'

    #Crie um initializer para o Recaptcha (ex.: config/initializers/recaptcha.rb) com as seguintes linhas

        require 'net/http'

        Recaptcha.configure do |config|
            config.public_key  = '6LdBz8MSAAAAAF51L5mENofF997uOHzYlPWKf1av'
            config.private_key = '6LdBz8MSAAAAAIM4n4ti-haQa3oyfAMONhhJL8Xt'
        end

    #Adicione a tag do recaptcha na view em que ele aparecerá

        <%= recaptcha_tags %>

    #Faça a validação na controller dessa view

        if verify_recaptcha
            puts 'Captcha inserido corretamente'
        else
            puts 'Captcha inserido incorretamente'
        end

    #Antes de rodar o servidor, rode o 'bundle install'

#Ajax
    # remote true, para button, link e form
    # o nome da action tem que ter na mesma pasta da view um arquivo com extensao(js), actionX.js.erb.
    # dentro do .js o id pra onde vai o html, o :partial, pra chamar uma partial e o nome da view, no caso abaixo entidades.
    # ex: $("#colunaDireita").html("<%= escape_javascript(render(:partial => "entidades")) %>");
    # 

#GITHUB
    Guia Rápido sobre Git

    #Instalando o Git
    sudo apt-get install git-core git-gui git-doc

    #Iniciando um repositório
    mkdir diretorio
    cd diretorio
    git init

    #Definindo informações pessoais no repositório
    git config --global user.name "Nome e Sobrenome"
    git config --global user.email "email@dominio.com.br"

    #git remote add origin git@github.com:tiagovtg/projeto

    #Definindo cores

    git config color.branch auto
    git config color.diff auto
    git config color.interactive auto
    git config color.status auto
    git config color.ui true

    #Clonando um repositório
    git clone git://github.com/seu-usuario/projeto.git
    cd projeto

    #Atualizando um repositório
    git pull

    #Atualizando um repositório clonado do GitHub
    git pull origin master

    #Mostrando situação relativa a inclusão, exclusão e alteração de arquivos
    git status

    #Verificando as modificações
    git diff

    #Adicionando itens criados ou modificados
    git add .

    #Fazendo o commit das alterações
    git commit -a -m "Comentário."

    Enviando as atualizações
    git push

    Forçando as atualizações para o GitHub
    git push origin master -ff


#IMGKit

    #O IMGKit precisa do WKHTMLTOIMAGE para funcionar
    #Para instala-lo, baixe o pacote

    #32bits
    http://wkhtmltopdf.googlecode.com/files/wkhtmltoimage-0.10.0_rc2-static-i386.tar.bz2
    #64bits
    http://wkhtmltopdf.googlecode.com/files/wkhtmltoimage-0.10.0_rc2-static-amd64.tar.bz2

    #Descompacte o pacote

    tar -jxvf wkhtmltoimage-0.10.0_rc2-static-i386.tar.bz2

    #Mova o arquivo descompactado para a pasta /usr/bin

    mv wkhtmltoimage-i386 /usr/bin/.

#JQUERY-RAILS Instalar o jquery no projeto.
    Digite no root do projeto: rails g jquery:install
    Adicione essa linha no Gemfile: gem 'jquery-rails'
    Adicione no seu application.html.rb: <%= javascript_include_tag :defaults , 'javascript'%>, onde javascript é qualquer arquivo
    extra para colocar seus scripts.

#PAPERCLIP

    # O Paperclip requer o ImageMagick para funcionar.
    # Para instala-lo, use o comando abaixo:

        sudo apt-get install imagemagick

    # Você também precisará desta biblioteca para ele funcionar:

        sudo apt-get install libmagickwand-dev

#BUNDLE

    # Não esqueça  em hipótese alguma, de modo algum de rodar o bundle no terminal.
    # Abra a pasta onde está o projeto, e rode o comando

        bundle install

    # Se ele exigir permissão de escrita, rode como

        sudo bundle install

    # Ele pedirá a sua senha e depois rodará normalmente.
    # OBS.: Certifique-se que você está conectado à internet.

#MIGRATIONS

    # A aplicação não funcionará sem o banco de dados.
    # Após certificar-se que o mesmo está funcionando, edite o arquivo db/config/database.yml
    # de acordo com as configurações do seu banco de dados (usuário, senha, porta, etc...)
    # No terminal, utilize este comando para criar o banco:

        rake db:create

    # Depois, rode este comando para efetuar as migrações:

        rake db:migrate

# BANCOS DE DADOS

    #Instalando o mysql2
        sudo apt-get install mysql-server
        sudo apt-get install libmysql-ruby libmysqlclient-dev
        gem install mysql2

    #Instalando o PostGres
        sudo apt-get install


# PASSENGER

    # 1 configurar permissao local e rota. usar tab como separador
    sudo gedit /etc/hosts
    127.0.1.1   www.teste.com

    # 2 configurar o arquivo do virtual host, dentro de apache2/sites-avaliable/
    # sudo gedit teste

    #inclua esssas linhas
    <VirtualHost *:80>
      ServerName www.teste.com
      DocumentRoot /home/www/teste/public
      <Directory /home/www/teste/public>
         AllowOverride all
         Options -MultiViews
      </Directory>
    </VirtualHost>

    # 3 copie seus arquivos para a pasta home/www/teste
    sudo cp -r origem home/www/teste

    # 4 criar permissao(owner) para o apache na pasta home/www
    chown -R www-data:www-data www

    # 5 criar link simbolico, de dentro do diretorio apache2/sites-enabled/
    a2ensites teste

    # 6 configurar o arquivo apache.conf
    LoadModule passenger_module /usr/lib/ruby/gems/1.8/gems/passenger-3.0.7/ext/apache2/mod_passenger.so
    PassengerRoot /usr/lib/ruby/gems/1.8/gems/passenger-3.0.7
    PassengerRuby /usr/bin/ruby1.8
    RailsEnv development #ambiente que quiser usar

    # 7 reiniciar o servidor
    /etc/init.d/apache2 restart

    be happy!

# WEBSVN
    1 - Crier o diretório do projeto:

   # mkdir /home/svn-repos/nome_do_projeto


    2 - Altere o dono da pasta

   # chown www-data:subversion nome_do_projeto -R


    3 - Crie o projeto no SVN:

   # svnadmin create --fs-type fsfs /home/svn-repos/nome_projeto


    4 - Edite no apache o arquivo dav_svn.conf

   # pico /etc/apache2/mods-available/dav_svn.conf


    5 - Acrescente ao arquivo as seguintes linhas:

    <Location /nome_do_projeto>
        DAV svn
        SVNPath /home/svn-repos/nome_do_projeto
        AuthType Basic
        AuthName "Subversion Repository: Nome do Projeto"
        AuthUserFile /etc/apache2/dav_svn.passwd
        Require valid-user
    </Location>


    6 - Reinicie o servidor web (Apache)

    # /etc/init.d/apache2 restart


# SubVersion